#!/usr/bin/env python3
import os
import re
import signal
from pathlib import Path
from textwrap import TextWrapper
from configparser import ConfigParser
from os.path import commonprefix
from collections import defaultdict
from typing import Pattern

import pyalpm
from pycman.config import PacmanConfig

import requests

#Based on checkupdates
def fake_db_handle():
    fake_db_path = Path("/tmp/checkup-db-{}/".format(os.getuid()))
    fake_db_path.mkdir(exist_ok=True)

    config = PacmanConfig("/etc/pacman.conf")
    real_db_path = Path(config.options["DBPath"])

    fake_local = fake_db_path/"local"
    if not fake_local.exists():
        fake_local.symlink_to(real_db_path/"local")

    #trap 'rm -f $CHECKUPDATES_DB/db.lck' INT TERM EXIT
    def signal_handler(signum, frame):
        (fake_db_path/"db.lck").unlink(missing_ok=True)
    for sig in [signal.SIGINT, signal.SIGTERM]:
        signal.signal(sig, signal_handler)

    config.options["DBPath"] = str(fake_db_path)
    return config.initialize_alpm()
def alpm_update_dbs(handle):
    for db in handle.get_syncdbs():
        t = handle.init_transaction()
        db.update(False)
        t.release()

# Maybe a special type for updates would be nice
def get_updates(handle):
    syncdbs = handle.get_syncdbs()
    localpkgs = handle.get_localdb().pkgcache
    return (
        (old, new)
        for old in localpkgs
        if (new := pyalpm.sync_newversion(old, syncdbs))
    )



def sorteditems(d, key, reverse=False):
    return sorted(d.items(), key=lambda item: key(item[1]), reverse=reverse)

def removesuffix(text, suffix):
    return text[:-len(suffix)] if text.endswith(suffix) else text
def removesuffixes(text, suffixes):
    for suffix in suffixes:
        text = removesuffix(text, suffix)
    return text

def prefix_diff(r, a:str, b:str):
    a_split = r.split(a)
    b_split = r.split(b)
    common = commonprefix([a_split, b_split])
    diff_a = ''.join(a_split[len(common):])
    diff_b = ''.join(b_split[len(common):])
    return ''.join(common), diff_a, diff_b

def remove_trivial_pkgrel(ver : str):
    return removesuffixes(ver, ["-1", ".arch1"])

version_fragment = re.compile(r'(\w+)')
strip_suffix = "-1"
def version_diff(a : str, b: str):
    prefix, diff_a, diff_b = prefix_diff(version_fragment, a, b)
    return (prefix,
            remove_trivial_pkgrel(diff_a),
            remove_trivial_pkgrel(diff_b))

#Libalpm implements version parsing but pyalpm doesn't provide a wrapper
def strip_release(ver : str):
    return ver.split("-")[0]
def version_release(ver : str):
    return ver.split("-")[1]
def is_haskell(pkg):
    return "ghc-libs" in pkg.depends

def strip_upgpkg_prefix(msg : str, pkg : pyalpm.Package):
    # take only the first line of the message to keep the messages small
    msg = msg.partition('\n')[0]

    # TODO: get rid of this abomination
    prefix_re = r'^(?:(?:upgpkg ?[:-] ?)?' + re.escape(pkg.base)+" )?"+re.escape(pkg.version) + r' ?[:-] ?'
    return re.sub(prefix_re, "", msg)


# Based on https://gist.github.com/gbaman/b3137e18c739e0cf98539bf4ec4366ad
def run_query(query, token):
    request = requests.post(
        'https://api.github.com/graphql',
        json = {'query': query},
        headers = {"Authorization": "Bearer "+token}
    )
    if request.status_code == 200:
        return request.json()
    else:
        raise Exception("Query failed to run by returning code of {}. {}".format(request.status_code, query))

# https://wiki.archlinux.org/index.php/Arch_Build_System#Repository_tree
def db_repo(db):
    if db.name in ["core", "extra", "testing"]:
        reponame = "packages"
    elif db.name in ["community", "multilib"]:
        reponame = "community"
    return ("archlinux", "svntogit-" + reponame)

# This could potentially display wrong (too recent) message if the package is also in testing.
refmsg_fragment = """
fragment refmsg on Ref{
  target {
    ... on Commit {
      history(first: 1, path: "trunk/") {
        nodes {
          message
        }
      }
    }
  }
}"""

# We have to dynamically build queries in order to batch requests for all branches into one query
def pkg_query(index, pkg):
    # graphql names can't begin with a digit so we prefix an underscore
    return f'    _{index}: ref(qualifiedName: "refs/heads/packages/{pkg.name}") {{... refmsg}}'
def repo_query(db, numbered_pkgs):
    owner, repo = db_repo(db)
    pkg_queries = "\n".join([pkg_query(i, pkg) for i, pkg in numbered_pkgs])
    return f'  {db.name}: repository(name: "{repo}", owner: "{owner}") {{\n{pkg_queries}\n  }}'
def build_query(numbered_pkgs):
    by_db = defaultdict(set)
    for i_pkg in numbered_pkgs:
        by_db[i_pkg[1].db].add(i_pkg)

    query_content = "\n".join([repo_query(db, npkgs) for db, npkgs in by_db.items()])
    return "query {\n" + query_content + "\n}\n" + refmsg_fragment

def parse_index(index):
    return int(index[1:])# remove the underscore prefix

# Doesn't handle unexpected responses
def unpack_response(resp, by_index):
    for repo in resp['data'].values():
        for alias, ref_data in repo.items():
            yield (
                by_index[parse_index(alias)],
                ref_data['target']['history']['nodes'][0]['message']
            )

def by_msg(pairs):
    ret = defaultdict(set)
    for upd, msg in pairs:
        ret[msg].add(upd)
    return ret

def fetch_messages(upds, token):
    if not upds:
        return {}
    # to distinguish between packages in response we have to give each subquery an alias
    # we assign a number to every package to avoid having to alias subqueries with escaped package names
    query = build_query([(i, new) for i, (old, new) in enumerate(upds)])
    response = run_query(query, token)
    return unpack_response(response, upds)

def sort_updates(updates):
    updated = []
    recompiled = []
    haskell_recompiled = []
    for upd in updates:
        old, new = upd
        if strip_release(old.version) == strip_release(new.version):
            if is_haskell(old):
                haskell_recompiled.append(upd)
            else:
                recompiled.append(upd)
        else:
            updated.append(upd)
    return updated, recompiled, haskell_recompiled


# Apparently Conky does something special with '#', must be escaped, otherwise everything after the # is not displayed
# Package names and versions don't require escaping since they can't contain '#', but commit messages can (eg. when referencing an issue: "FS#1234").
def conky_escape(str):
    return str.replace('#','\\#')

arrow = "â†’"
normal_color = "${color2}"
msg_color = "${color1}"
error_color = "${color3}"

# normal_color="\u001b[0m"
# msg_color="\u001b[90m"
# error_color="\u001b[31m"

indent = "   "
# indent = "${goto 30}" # causes conky to cut off text at right edge
# TextWrapper removes all newlines from input text, could be a problem if support for multiline messages is added
wrapper = TextWrapper(width=60, initial_indent=indent, subsequent_indent=indent)

def print_pkgrel_bump(old, new, msg=''):
    print("{: <20} {: <7} [{} {} {}] {}"
            .format(old.name,
                    strip_release(old.version),
                    version_release(old.version),
                    arrow,
                    version_release(new.version),
                    msg))
def print_commit_msg(msg):
    print(msg_color + conky_escape(wrapper.fill(msg)) + normal_color)

def format_version_change(oldver : str, newver : str):
    prefix, diff_old, diff_new = version_diff(oldver, newver)
    if prefix:
        return '{}[{} {} {}]'.format(prefix, diff_old, arrow, diff_new)
    else:
        return '{} {} {}'.format(diff_old, arrow, diff_new)

def print_updates(updated):
    for old, new in updated:
        print("{: <20} {}".format(old.name, format_version_change(old.version, new.version)))
    if updated:
        print()

def print_recompiled(recompiled):
    for msg, upds in sorteditems(recompiled, len, True):
        for old, new in upds:
            print_pkgrel_bump(old, new)
        print_commit_msg(msg)
        if len(upds) > 1:
            print()
    if recompiled:
        print()

def print_haskell_recompiled(haskell_recompiled, max_pkgs):
    n = len(haskell_recompiled)
    if n > max_pkgs:
        print(n, "haskell packages")
    else:
        for old, new in haskell_recompiled:
            print_pkgrel_bump(old, new)
    # if haskell_recompiled:
    #     _, sample = haskell_recompiled[0]
    #     print_commit_msg(stripped_commit_msg(sample))

def main():
    config = ConfigParser()
    config.read(Path("~/.config/update-fmt.conf").expanduser())
    token = config['Login']['GithubToken']

    handle = fake_db_handle()
    alpm_update_dbs(handle)
    updated, recompiled, haskell_recompiled = sort_updates(get_updates(handle))
    messages = fetch_messages(recompiled, token)
    messages = by_msg(
        ((upd, strip_upgpkg_prefix(msg, upd[1])) for upd, msg in messages)
    )

    print(normal_color, end='')
    print_updates(updated)
    print_recompiled(messages)
    print_haskell_recompiled(haskell_recompiled, 3)

if __name__ == "__main__":
    main()
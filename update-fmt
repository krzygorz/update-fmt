#!/usr/bin/env python3
import os
import re
import signal
from pathlib import Path
from textwrap import TextWrapper
from os.path import commonprefix
from typing import Pattern
# import subprocess

import pyalpm
from pycman.config import PacmanConfig

import requests
import lxml.html

#Based on checkupdates
def setup_alpm():
    fake_db_path = Path("/tmp/checkup-db-{}/".format(os.getuid()))
    fake_db_path.mkdir(exist_ok=True)

    config = PacmanConfig("/etc/pacman.conf")
    real_db_path = Path(config.options["DBPath"])

    fake_local = fake_db_path/"local"
    if not fake_local.exists():
        fake_local.symlink_to(real_db_path/"local")

    #trap 'rm -f $CHECKUPDATES_DB/db.lck' INT TERM EXIT
    def signal_handler(signum, frame):
        (fake_db_path/"db.lck").unlink(missing_ok=True)
    for sig in [signal.SIGINT, signal.SIGTERM]:
        signal.signal(sig, signal_handler)

    config.options["DBPath"] = str(fake_db_path)
    return config.initialize_alpm()
def alpm_update(handle):
    for db in handle.get_syncdbs():
        t = handle.init_transaction()
        db.update(False)
        t.release()

def prefix_diff(r, a:str, b:str):
    a_split = r.split(a)
    b_split = r.split(b)
    common = commonprefix([a_split, b_split])
    diff_a = ''.join(a_split[len(common):])
    diff_b = ''.join(b_split[len(common):])
    return ''.join(common), diff_a, diff_b
version_fragment = re.compile(r'(\w+)')
arrow = "→"
def format_version_change(oldver : str, newver : str):
    common, old_diff, new_diff = prefix_diff(version_fragment, oldver, newver)
    if common:
        # return '{}${{color3}}[{} → {}]${{color2}}'.format(common, old_diff, new_diff)
        return '{}[{} {} {}]'.format(common, old_diff, arrow, new_diff)
    else:
        return '{} {} {}'.format(oldver, arrow, newver)

#Libalpm implements version parsing but pyalpm doesn't provide a wrapper
def strip_release(ver : str):
    return ver.rpartition("-")[0]
def version_release(ver : str):
    return ver.rpartition("-")[2]
def is_haskell(pkg):
    return "ghc-libs" in pkg.depends
def print_pkgrel_bump(old, new, msg=''):
    print("{: <20} {: <7} [{} {} {}] {}"
            .format(old.name,
                    strip_release(old.version),
                    version_release(old.version),
                    arrow,
                    version_release(new.version),
                    msg))
# def last_commit_msg(pkg):
#     proc = subprocess.Popen(['asp', 'shortlog', pkg.name], stdout=subprocess.PIPE)
#     msg = proc.stdout.readline().decode().split(' ', 1)[1] #First part is commit hash
#     #Cut off prefix generated by upgpkg
#     #There is a slight chance this might cut the message too.
#     return msg.split(':')[-1].strip()

logurl="https://git.archlinux.org/svntogit/{}.git/log/trunk"
def last_commit_msg(pkg):
    a = requests.get(logurl.format(pkg.db.name), {'h':'packages/'+pkg.name})
    e = lxml.html.fromstring(a.content)
    return e.xpath('body/div/div/table/tr[2]/td/a/text()')[0]
def remove_prefix(text, prefix):
    if text.startswith(prefix):
        return text[len(prefix):]
    return text
def format_commit_msg(pkg):
    msg = last_commit_msg(pkg)
    upgpkg_prefix = "upgpkg: {} {}: ".format(pkg.name, pkg.version)
    msg_trimmed = remove_prefix(msg, upgpkg_prefix)
    return "${font DejaVu Sans Mono :size=10}${color1}"+msg_trimmed+"${color2}${font}"
    # return "${color1}"+msg_trimmed+"${color2}"
    # return msg_trimmed

handle = setup_alpm()
alpm_update(handle)
recompiled = []
haskell_recompiled = []

for pkg in handle.get_localdb().pkgcache: #type: pyalpm.Package
    update = pyalpm.sync_newversion(pkg, handle.get_syncdbs()) #type: pyalpm.Package
    if update:
        if strip_release(pkg.version) == strip_release(update.version):
            if is_haskell(pkg):
                haskell_recompiled.append((pkg, update))
            else:
                recompiled.append((pkg,update))
        else:
            format_version_change(pkg.version, update.version)
            print("{: <20} {}".format(pkg.name, format_version_change(pkg.version, update.version)))
print()
indent = "${goto 30}"
wrapper = TextWrapper(width=150, initial_indent=indent, subsequent_indent=indent)
for old, new in recompiled:
    print_pkgrel_bump(old, new)
    print(wrapper.fill(format_commit_msg(new)))

n = len(haskell_recompiled)
print()
if n > 3:
    print(n, "haskell packages")
else:
    for old, new in haskell_recompiled:
        print_pkgrel_bump(old, new)
